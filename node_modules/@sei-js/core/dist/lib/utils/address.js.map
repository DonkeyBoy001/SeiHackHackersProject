{"version":3,"file":"address.js","names":["_encoding","require","_cryptoJs","_interopRequireDefault","_elliptic","isValidSeiAddress","address","_fromBech","fromBech32","prefix","e","exports","pubKeyToKeyPair","pubKey","secp256k1","EllipticCurve","keyFromPublic","Buffer","from","toString","pubKeyToBytes","uncompressed","length","keyPair","Uint8Array","getPublic","encode","encodeCompressed","getAddressFromPubKey","hash","CryptoJS","SHA256","lib","WordArray","create","RIPEMD160","enc","Hex","parse","verifyDigest32","digest","signature","Error","concat","r","slice","s","verify"],"sources":["../../../src/lib/utils/address.ts"],"sourcesContent":["import { fromBech32 } from '@cosmjs/encoding';\nimport CryptoJS from 'crypto-js';\nimport { ec as EllipticCurve } from 'elliptic';\n\nexport const isValidSeiAddress = (address: string) => {\n\ttry {\n\t\tconst { prefix } = fromBech32(address);\n\t\treturn prefix && prefix === 'sei';\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nexport const pubKeyToKeyPair = (pubKey: Uint8Array): EllipticCurve.KeyPair => {\n\tconst secp256k1 = new EllipticCurve('secp256k1');\n\n\treturn secp256k1.keyFromPublic(Buffer.from(pubKey).toString('hex'), 'hex');\n};\n\nexport const pubKeyToBytes = (pubKey: Uint8Array, uncompressed?: boolean): Uint8Array => {\n\tif (uncompressed && pubKey.length === 65) {\n\t\treturn pubKey;\n\t}\n\tif (!uncompressed && pubKey.length === 33) {\n\t\treturn pubKey;\n\t}\n\n\tconst keyPair = pubKeyToKeyPair(pubKey);\n\n\tif (uncompressed) {\n\t\treturn new Uint8Array(Buffer.from(keyPair.getPublic().encode('hex', false), 'hex'));\n\t} else {\n\t\treturn new Uint8Array(Buffer.from(keyPair.getPublic().encodeCompressed('hex'), 'hex'));\n\t}\n};\n\nexport const getAddressFromPubKey = (pubKey: Uint8Array): Uint8Array => {\n\tlet hash = CryptoJS.SHA256(CryptoJS.lib.WordArray.create(pubKeyToBytes(pubKey) as any)).toString();\n\thash = CryptoJS.RIPEMD160(CryptoJS.enc.Hex.parse(hash)).toString();\n\n\treturn new Uint8Array(Buffer.from(hash, 'hex'));\n};\n\nexport const verifyDigest32 = (digest: Uint8Array, signature: Uint8Array, pubKey: Uint8Array): boolean => {\n\tif (digest.length !== 32) {\n\t\tthrow new Error(`Invalid length of digest to verify: ${digest.length}`);\n\t}\n\n\tif (signature.length !== 64) {\n\t\tthrow new Error(`Invalid length of signature: ${signature.length}`);\n\t}\n\n\tconst secp256k1 = new EllipticCurve('secp256k1');\n\n\tconst r = signature.slice(0, 32);\n\tconst s = signature.slice(32);\n\n\treturn secp256k1.verify(\n\t\tdigest,\n\t\t{\n\t\t\tr: Buffer.from(r).toString('hex'),\n\t\t\ts: Buffer.from(s).toString('hex')\n\t\t},\n\t\tpubKeyToKeyPair(pubKey)\n\t);\n};\n"],"mappings":"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"}