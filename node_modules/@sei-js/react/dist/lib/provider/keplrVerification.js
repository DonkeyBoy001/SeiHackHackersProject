'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.getVerifiedSuggestChain = exports.checkKeplrForChain = void 0;
var _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));
var _asyncToGenerator2 = _interopRequireDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var getVerifiedSuggestChain = function getVerifiedSuggestChain(chainId) {
	return {
		chainId: chainId,
		chainName: 'Sei ('.concat(chainId, ')'),
		rpc: 'https://rpc.wallet.'.concat(chainId, '.sei.io'),
		rest: 'https://rest.wallet.'.concat(chainId, '.sei.io'),
		bip44: {
			coinType: 118
		},
		bech32Config: {
			bech32PrefixAccAddr: 'sei',
			bech32PrefixAccPub: 'seipub',
			bech32PrefixValAddr: 'seivaloper',
			bech32PrefixValPub: 'seivaloperpub',
			bech32PrefixConsAddr: 'seivalcons',
			bech32PrefixConsPub: 'seivalconspub'
		},
		currencies: [
			{
				coinDenom: 'SEI',
				coinMinimalDenom: 'usei',
				coinDecimals: 6
			}
		],
		feeCurrencies: [
			{
				coinDenom: 'SEI',
				coinMinimalDenom: 'usei',
				coinDecimals: 6,
				gasPriceStep: {
					low: 0.001,
					average: 0.02,
					high: 0.03
				}
			}
		],
		stakeCurrency: {
			coinDenom: 'SEI',
			coinMinimalDenom: 'usei',
			coinDecimals: 6
		},
		coinType: 118,
		features: ['stargate', 'ibc-transfer', 'cosmwasm']
	};
};
exports.getVerifiedSuggestChain = getVerifiedSuggestChain;
var checkKeplrForChain = /*#__PURE__*/ (function () {
	var _ref = (0, _asyncToGenerator2['default'])(
		/*#__PURE__*/ _regenerator['default'].mark(function _callee(chainId) {
			var _window$keplr;
			var keplrChainInformation, chainInfo;
			return _regenerator['default'].wrap(function _callee$(_context) {
				while (1)
					switch ((_context.prev = _context.next)) {
						case 0:
							_context.next = 2;
							return (_window$keplr = window['keplr']) === null || _window$keplr === void 0 ? void 0 : _window$keplr.getChainInfosWithoutEndpoints();
						case 2:
							keplrChainInformation = _context.sent;
							chainInfo =
								keplrChainInformation === null || keplrChainInformation === void 0
									? void 0
									: keplrChainInformation.find(function (chainInfo) {
											return chainInfo.chainId === chainId;
									  });
							return _context.abrupt('return', !!chainInfo);
						case 5:
						case 'end':
							return _context.stop();
					}
			}, _callee);
		})
	);
	return function checkKeplrForChain(_x) {
		return _ref.apply(this, arguments);
	};
})();
exports.checkKeplrForChain = checkKeplrForChain;
//# sourceMappingURL=keplrVerification.js.map
