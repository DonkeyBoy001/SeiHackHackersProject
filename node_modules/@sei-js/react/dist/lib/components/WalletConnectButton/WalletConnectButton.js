'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
var _typeof = require('@babel/runtime/helpers/typeof');
Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.truncateAddress = exports['default'] = void 0;
var _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));
var _asyncToGenerator2 = _interopRequireDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));
var _react = _interopRequireWildcard(require('react'));
var _reactOutsideClickHandler = _interopRequireDefault(require('react-outside-click-handler'));
var _provider = require('../../provider');
require('./styles.css');
var _utils = require('../../utils');
var _allFiles = require('@react-icons/all-files');
var _IoWalletOutline = require('@react-icons/all-files/io5/IoWalletOutline');
var _IoLogOutOutline = require('@react-icons/all-files/io5/IoLogOutOutline');
var _IoCopyOutline = require('@react-icons/all-files/io5/IoCopyOutline');
function _getRequireWildcardCache(nodeInterop) {
	if (typeof WeakMap !== 'function') return null;
	var cacheBabelInterop = new WeakMap();
	var cacheNodeInterop = new WeakMap();
	return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
		return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
	})(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
	if (!nodeInterop && obj && obj.__esModule) {
		return obj;
	}
	if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {
		return { default: obj };
	}
	var cache = _getRequireWildcardCache(nodeInterop);
	if (cache && cache.has(obj)) {
		return cache.get(obj);
	}
	var newObj = {};
	var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
	for (var key in obj) {
		if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) {
				Object.defineProperty(newObj, key, desc);
			} else {
				newObj[key] = obj[key];
			}
		}
	}
	newObj['default'] = obj;
	if (cache) {
		cache.set(obj, newObj);
	}
	return newObj;
}
var truncateAddress = function truncateAddress(address) {
	return ''.concat(address.slice(0, 3), '....').concat(address.slice(address.length - 5));
};
exports.truncateAddress = truncateAddress;
var WalletConnectButton = function WalletConnectButton(_ref) {
	var buttonClassName = _ref.buttonClassName,
		primaryColor = _ref.primaryColor,
		secondaryColor = _ref.secondaryColor,
		backgroundColor = _ref.backgroundColor;
	var _useState = (0, _react.useState)(false),
		_useState2 = (0, _slicedToArray2['default'])(_useState, 2),
		showMenu = _useState2[0],
		setShowMenu = _useState2[1];
	var _useState3 = (0, _react.useState)(false),
		_useState4 = (0, _slicedToArray2['default'])(_useState3, 2),
		recentlyCopied = _useState4[0],
		setRecentlyCopied = _useState4[1];
	var _useContext = (0, _react.useContext)(_provider.SeiWalletContext),
		connectedWallet = _useContext.connectedWallet,
		accounts = _useContext.accounts,
		setTargetWallet = _useContext.setTargetWallet,
		setShowConnectModal = _useContext.setShowConnectModal;
	(0, _react.useEffect)(
		function () {
			var color = primaryColor && (0, _utils.isValidCSSColor)(primaryColor) ? primaryColor : '#121212';
			document.documentElement.style.setProperty('--wallet-primary-color', color);
			document.documentElement.style.setProperty('--wallet-primary-color-11', ''.concat(color, '11'));
			document.documentElement.style.setProperty('--wallet-primary-color-22', ''.concat(color, '22'));
			document.documentElement.style.setProperty('--wallet-primary-color-33', ''.concat(color, '33'));
			document.documentElement.style.setProperty('--wallet-primary-color-44', ''.concat(color, '44'));
		},
		[primaryColor]
	);
	(0, _react.useEffect)(
		function () {
			var color = secondaryColor && (0, _utils.isValidCSSColor)(secondaryColor) ? secondaryColor : '#8C8C8C';
			document.documentElement.style.setProperty('--wallet-secondary-color', color);
		},
		[secondaryColor]
	);
	(0, _react.useEffect)(
		function () {
			var color = backgroundColor && (0, _utils.isValidCSSColor)(backgroundColor) ? backgroundColor : '#F1F1F1';
			document.documentElement.style.setProperty('--wallet-background-color', color);
		},
		[backgroundColor]
	);
	var changeWallet = function changeWallet() {
		setShowMenu(false);
		setShowConnectModal(true);
	};
	var copyAddress = /*#__PURE__*/ (function () {
		var _ref2 = (0, _asyncToGenerator2['default'])(
			/*#__PURE__*/ _regenerator['default'].mark(function _callee() {
				var _accounts$;
				return _regenerator['default'].wrap(function _callee$(_context) {
					while (1)
						switch ((_context.prev = _context.next)) {
							case 0:
								setRecentlyCopied(true);
								_context.next = 3;
								return navigator.clipboard.writeText(
									accounts === null || accounts === void 0 || (_accounts$ = accounts[0]) === null || _accounts$ === void 0 ? void 0 : _accounts$.address
								);
							case 3:
								setTimeout(function () {
									setRecentlyCopied(false);
								}, 1500);
							case 4:
							case 'end':
								return _context.stop();
						}
				}, _callee);
			})
		);
		return function copyAddress() {
			return _ref2.apply(this, arguments);
		};
	})();
	var disconnect = function disconnect() {
		if (setTargetWallet) setTargetWallet(undefined);
	};
	var renderButton = function renderButton() {
		if (!connectedWallet) {
			return /*#__PURE__*/ _react['default'].createElement(
				'button',
				{
					className: buttonClassName,
					onClick: function onClick() {
						return setShowConnectModal(true);
					}
				},
				'connect wallet'
			);
		}
		var accountLabel = (accounts === null || accounts === void 0 ? void 0 : accounts[0]) === undefined ? 'connecting...' : truncateAddress(accounts[0].address);
		return /*#__PURE__*/ _react['default'].createElement(
			'div',
			{
				className: 'connect_wrapper'
			},
			/*#__PURE__*/ _react['default'].createElement(
				'button',
				{
					disabled: showMenu,
					className: buttonClassName,
					onClick: function onClick() {
						return setShowMenu(true);
					}
				},
				accountLabel
			),
			showMenu &&
				/*#__PURE__*/ _react['default'].createElement(
					_reactOutsideClickHandler['default'],
					{
						onOutsideClick: function onOutsideClick() {
							return setShowMenu(false);
						}
					},
					/*#__PURE__*/ _react['default'].createElement(
						'div',
						{
							className: 'wallet__menu'
						},
						accounts &&
							/*#__PURE__*/ _react['default'].createElement(
								'div',
								{
									className: 'wallet__menu--item',
									onClick: copyAddress
								},
								/*#__PURE__*/ _react['default'].createElement(_IoCopyOutline.IoCopyOutline, {
									className: 'wallet__menu--item-icon'
								}),
								/*#__PURE__*/ _react['default'].createElement('span', null, recentlyCopied ? 'copied' : 'copy address')
							),
						/*#__PURE__*/ _react['default'].createElement(
							'div',
							{
								className: 'wallet__menu--item',
								onClick: changeWallet
							},
							/*#__PURE__*/ _react['default'].createElement(_IoWalletOutline.IoWalletOutline, {
								className: 'wallet__menu--item-icon'
							}),
							/*#__PURE__*/ _react['default'].createElement('span', null, 'change wallet')
						),
						/*#__PURE__*/ _react['default'].createElement(
							'div',
							{
								className: 'wallet__menu--item',
								onClick: disconnect
							},
							/*#__PURE__*/ _react['default'].createElement(_IoLogOutOutline.IoLogOutOutline, {
								className: 'wallet__menu--item-icon'
							}),
							/*#__PURE__*/ _react['default'].createElement('span', null, 'disconnect')
						)
					)
				)
		);
	};
	return /*#__PURE__*/ _react['default'].createElement(
		_react['default'].Fragment,
		null,
		/*#__PURE__*/ _react['default'].createElement(
			_allFiles.IconContext.Provider,
			{
				value: {
					color: 'var(--wallet-primary-color)',
					size: '50px'
				}
			},
			renderButton()
		)
	);
};
var _default = WalletConnectButton;
exports['default'] = _default;
//# sourceMappingURL=WalletConnectButton.js.map
