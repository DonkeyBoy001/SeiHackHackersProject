'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
var _typeof = require('@babel/runtime/helpers/typeof');
Object.defineProperty(exports, '__esModule', {
	value: true
});
exports['default'] = void 0;
var _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));
var _asyncToGenerator2 = _interopRequireDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var _slicedToArray2 = _interopRequireDefault(require('@babel/runtime/helpers/slicedToArray'));
var _react = _interopRequireWildcard(require('react'));
var _provider = require('../../provider');
require('./styles.css');
var _AiFillCloseCircle = require('@react-icons/all-files/ai/AiFillCloseCircle');
var _BiErrorAlt = require('@react-icons/all-files/bi/BiErrorAlt');
var _BiError = require('@react-icons/all-files/bi/BiError');
var _FaCheckCircle = require('@react-icons/all-files/fa/FaCheckCircle');
var _AiFillLeftCircle = require('@react-icons/all-files/ai/AiFillLeftCircle');
function _getRequireWildcardCache(nodeInterop) {
	if (typeof WeakMap !== 'function') return null;
	var cacheBabelInterop = new WeakMap();
	var cacheNodeInterop = new WeakMap();
	return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
		return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
	})(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
	if (!nodeInterop && obj && obj.__esModule) {
		return obj;
	}
	if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {
		return { default: obj };
	}
	var cache = _getRequireWildcardCache(nodeInterop);
	if (cache && cache.has(obj)) {
		return cache.get(obj);
	}
	var newObj = {};
	var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
	for (var key in obj) {
		if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) {
				Object.defineProperty(newObj, key, desc);
			} else {
				newObj[key] = obj[key];
			}
		}
	}
	newObj['default'] = obj;
	if (cache) {
		cache.set(obj, newObj);
	}
	return newObj;
}
var WalletSelectModal = function WalletSelectModal(_ref) {
	var inputWallets = _ref.wallets;
	var _useContext = (0, _react.useContext)(_provider.SeiWalletContext),
		connectedWallet = _useContext.connectedWallet,
		setTargetWallet = _useContext.setTargetWallet,
		wallets = _useContext.wallets,
		connectionError = _useContext.connectionError,
		targetWallet = _useContext.targetWallet,
		setConnectionError = _useContext.setConnectionError,
		showConnectModal = _useContext.showConnectModal,
		setShowConnectModal = _useContext.setShowConnectModal;
	var visibleWallets = inputWallets || wallets || [];
	var _useState = (0, _react.useState)(false),
		_useState2 = (0, _slicedToArray2['default'])(_useState, 2),
		isConnecting = _useState2[0],
		setIsConnecting = _useState2[1];
	var _useState3 = (0, _react.useState)(),
		_useState4 = (0, _slicedToArray2['default'])(_useState3, 2),
		infoTitle = _useState4[0],
		setInfoTitle = _useState4[1];
	var _useState5 = (0, _react.useState)(false),
		_useState6 = (0, _slicedToArray2['default'])(_useState5, 2),
		isMobile = _useState6[0],
		setIsMobile = _useState6[1];
	(0, _react.useEffect)(
		function () {
			if (connectedWallet || connectionError) {
				setIsConnecting(false);
			}
		},
		[connectedWallet, connectionError]
	);
	(0, _react.useEffect)(function () {
		var handleResize = function handleResize() {
			setIsMobile(window.innerWidth < 480);
		};
		setIsMobile(window.innerWidth < 480);
		window.addEventListener('resize', handleResize);
		return function () {
			return window.removeEventListener('resize', handleResize);
		};
	}, []);
	var isWalletInstalled = targetWallet !== undefined && window[targetWallet.walletInfo.windowKey] !== undefined;
	var hasImportantInfo = connectionError || infoTitle;
	var closeModal = function closeModal(e) {
		e.stopPropagation();
		if (infoTitle) {
			setInfoTitle(undefined);
			return;
		}
		setConnectionError(undefined);
		setShowConnectModal(false);
	};
	var renderWallet = function renderWallet(wallet) {
		var _targetWallet$walletI;
		var isConnectedWallet = (connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.walletInfo.name) === wallet.walletInfo.name;
		var renderConnection = function renderConnection() {
			if (isConnectedWallet)
				return /*#__PURE__*/ _react['default'].createElement(_FaCheckCircle.FaCheckCircle, {
					className: 'wallet__item--info-icon'
				});
			return null;
		};
		var selectWallet = /*#__PURE__*/ (function () {
			var _ref2 = (0, _asyncToGenerator2['default'])(
				/*#__PURE__*/ _regenerator['default'].mark(function _callee() {
					return _regenerator['default'].wrap(function _callee$(_context) {
						while (1)
							switch ((_context.prev = _context.next)) {
								case 0:
									setTargetWallet(wallet);
									setIsConnecting(true);
									setConnectionError(undefined);
								case 3:
								case 'end':
									return _context.stop();
							}
					}, _callee);
				})
			);
			return function selectWallet() {
				return _ref2.apply(this, arguments);
			};
		})();
		return /*#__PURE__*/ _react['default'].createElement(
			'div',
			{
				key: wallet.walletInfo.name,
				onClick: selectWallet,
				className: 'wallet__item '
					.concat(isConnectedWallet ? 'wallet__item-connected' : '', ' ')
					.concat(
						(targetWallet === null || targetWallet === void 0 || (_targetWallet$walletI = targetWallet.walletInfo) === null || _targetWallet$walletI === void 0
							? void 0
							: _targetWallet$walletI.windowKey) === wallet.walletInfo.windowKey
							? 'wallet__item-targeted'
							: ''
					)
			},
			/*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'wallet__item--info'
				},
				/*#__PURE__*/ _react['default'].createElement('img', {
					alt: wallet.walletInfo.name,
					src: wallet.walletInfo.icon,
					className: 'wallet__item--info-icon'
				}),
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'wallet__item--info-name'
					},
					wallet.walletInfo.name
				)
			),
			renderConnection()
		);
	};
	var renderAdditionalInfo = function renderAdditionalInfo() {
		if (isConnecting) {
			return /*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__right-centered'
				},
				/*#__PURE__*/ _react['default'].createElement('img', {
					alt: targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.icon,
					src: targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.icon,
					className: 'card__right--connecting-icon'
				}),
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'card__right--item-title'
					},
					'Connecting to ',
					targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.name,
					'...'
				)
			);
		}
		if (!isWalletInstalled && targetWallet) {
			var _targetWallet$walletI2, _targetWallet$walletI3;
			return /*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__right'
				},
				/*#__PURE__*/ _react['default'].createElement(
					'div',
					{
						className: 'card__right--header mobile-only',
						onClick: function onClick() {
							setConnectionError(undefined);
							setTargetWallet(undefined);
						}
					},
					/*#__PURE__*/ _react['default'].createElement(_AiFillLeftCircle.AiFillLeftCircle, {
						className: 'card__right--icon',
						style: {
							display: 'unset'
						}
					}),
					/*#__PURE__*/ _react['default'].createElement(
						'p',
						{
							className: 'card__right--title'
						},
						(targetWallet === null || targetWallet === void 0 || (_targetWallet$walletI2 = targetWallet.walletInfo) === null || _targetWallet$walletI2 === void 0
							? void 0
							: _targetWallet$walletI2.name) || 'Wallet',
						' not installed'
					)
				),
				/*#__PURE__*/ _react['default'].createElement(
					'div',
					{
						className: 'card__right--error'
					},
					/*#__PURE__*/ _react['default'].createElement(_BiErrorAlt.BiErrorAlt, {
						className: 'card__right--error-icon'
					}),
					/*#__PURE__*/ _react['default'].createElement(
						'p',
						{
							className: 'card__right--error-description'
						},
						'Please ensure you open this webpage from within the ',
						(targetWallet === null || targetWallet === void 0 || (_targetWallet$walletI3 = targetWallet.walletInfo) === null || _targetWallet$walletI3 === void 0
							? void 0
							: _targetWallet$walletI3.name) || 'Wallet',
						' mobile app.'
					)
				),
				(targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.website) &&
					/*#__PURE__*/ _react['default'].createElement(
						'a',
						{
							target: '_blank',
							href: targetWallet.walletInfo.website,
							className: 'card__right--download'
						},
						'Download ',
						targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.name
					)
			);
		}
		if (connectionError) {
			var _targetWallet$walletI4;
			return /*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__right'
				},
				/*#__PURE__*/ _react['default'].createElement(
					'div',
					{
						className: 'card__right--header mobile-only',
						onClick: function onClick() {
							setConnectionError(undefined);
							setTargetWallet(undefined);
						}
					},
					/*#__PURE__*/ _react['default'].createElement(_AiFillLeftCircle.AiFillLeftCircle, {
						className: 'card__right--icon',
						style: {
							display: 'unset'
						}
					}),
					/*#__PURE__*/ _react['default'].createElement(
						'p',
						{
							className: 'card__right--title'
						},
						'Connection error'
					)
				),
				/*#__PURE__*/ _react['default'].createElement(
					'div',
					{
						className: 'card__right--error'
					},
					/*#__PURE__*/ _react['default'].createElement(_BiError.BiError, {
						className: 'card__right--error-icon'
					}),
					/*#__PURE__*/ _react['default'].createElement(
						'p',
						{
							className: 'card__right--title'
						},
						"We couldn't connect to ",
						(targetWallet === null || targetWallet === void 0 || (_targetWallet$walletI4 = targetWallet.walletInfo) === null || _targetWallet$walletI4 === void 0
							? void 0
							: _targetWallet$walletI4.name) || 'your wallet'
					)
				),
				/*#__PURE__*/ _react['default'].createElement(
					'div',
					{
						className: 'card__right--item'
					},
					/*#__PURE__*/ _react['default'].createElement(
						'p',
						{
							className: 'card__right--item-title'
						},
						'How to resolve this issue?'
					),
					/*#__PURE__*/ _react['default'].createElement(
						'p',
						{
							className: 'card__right--item-description'
						},
						'A pending action or a locked wallet can cause issues. Please open the extension manually and try again.'
					)
				)
			);
		}
		if (connectedWallet && !hasImportantInfo) {
			return /*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__right-centered'
				},
				/*#__PURE__*/ _react['default'].createElement('img', {
					alt: targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.icon,
					src: targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.icon,
					className: 'card__right--connecting-icon'
				}),
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'card__right--item-title'
					},
					'Connected to ',
					targetWallet === null || targetWallet === void 0 ? void 0 : targetWallet.walletInfo.name
				)
			);
		}
		if (!hasImportantInfo && isMobile) return null;
		return /*#__PURE__*/ _react['default'].createElement(
			'div',
			{
				className: 'card__right'
			},
			/*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__right--header',
					onClick: function onClick() {
						return setInfoTitle(undefined);
					}
				},
				/*#__PURE__*/ _react['default'].createElement(_AiFillLeftCircle.AiFillLeftCircle, {
					className: 'card__right--icon',
					onClick: function onClick() {
						return setInfoTitle(undefined);
					}
				}),
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'card__right--title'
					},
					'New to using a wallet?'
				)
			),
			/*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__right--item'
				},
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'card__right--item-title'
					},
					'A Secure Hub for Digital Transactions'
				),
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'card__right--item-description'
					},
					'Wallets provide a secure environment for signing and sending transactions involving your tokens and NFTs.'
				)
			),
			/*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__right--item'
				},
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'card__right--item-title'
					},
					'A modern way to log in'
				),
				/*#__PURE__*/ _react['default'].createElement(
					'p',
					{
						className: 'card__right--item-description'
					},
					'Rather than generating new accounts and passwords for each website, simply link your wallet.'
				)
			)
		);
	};
	if (!showConnectModal) return null;
	var renderContent = function renderContent() {
		var shouldShowHomeInfo = !hasImportantInfo || !isMobile;
		return /*#__PURE__*/ _react['default'].createElement(
			_react['default'].Fragment,
			null,
			shouldShowHomeInfo &&
				/*#__PURE__*/ _react['default'].createElement(
					'div',
					{
						className: 'card__header'
					},
					/*#__PURE__*/ _react['default'].createElement(
						'h2',
						{
							className: 'card__header--title'
						},
						'Connect a wallet'
					),
					/*#__PURE__*/ _react['default'].createElement(_AiFillCloseCircle.AiFillCloseCircle, {
						className: 'card__header--close',
						onClick: closeModal
					})
				),
			/*#__PURE__*/ _react['default'].createElement(
				'div',
				{
					className: 'card__content'
				},
				shouldShowHomeInfo &&
					/*#__PURE__*/ _react['default'].createElement(
						_react['default'].Fragment,
						null,
						/*#__PURE__*/ _react['default'].createElement(
							'div',
							{
								className: 'card__content--wallets'
							},
							visibleWallets.map(renderWallet)
						),
						/*#__PURE__*/ _react['default'].createElement('div', {
							className: 'card__content--separator'
						})
					),
				renderAdditionalInfo()
			)
		);
	};
	var renderMobileHelper = function renderMobileHelper() {
		if (hasImportantInfo) return null;
		var title = 'New to using a wallet?';
		return /*#__PURE__*/ _react['default'].createElement(
			'div',
			{
				className: 'card__content--mobile-helper'
			},
			/*#__PURE__*/ _react['default'].createElement(
				'p',
				{
					className: 'card__right--title-mobile',
					onClick: function onClick() {
						return setInfoTitle(title);
					}
				},
				title
			)
		);
	};
	return /*#__PURE__*/ _react['default'].createElement(
		'div',
		{
			onClick: closeModal,
			className: 'modal__background'
		},
		/*#__PURE__*/ _react['default'].createElement(
			'div',
			{
				onClick: function onClick(e) {
					return e.stopPropagation();
				},
				className: 'modal__card'
			},
			renderContent(),
			renderMobileHelper()
		)
	);
};
var _default = WalletSelectModal;
exports['default'] = _default;
//# sourceMappingURL=WalletSelectModal.js.map
